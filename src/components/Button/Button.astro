---
interface Props {
  href?: string;
  variant?: 'primary' | 'secondary' | 'outline';
  size?: 'sm' | 'md' | 'lg';
  fullWidth?: boolean;
  icon?: string;
  class?: string;
}

const {
  href,
  variant = 'primary',
  size = 'md',
  fullWidth = false,
  icon,
  class: customClass = '',
} = Astro.props;

// Estilos según la variante
const variantStyles = {
  primary: 'bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-white shadow-md',
  secondary: 'bg-indigo-100 hover:bg-indigo-200 text-indigo-700 dark:bg-indigo-900/60 dark:hover:bg-indigo-800 dark:text-indigo-200',
  outline: 'border border-indigo-500 text-indigo-500 hover:bg-indigo-500/10 dark:border-indigo-400 dark:text-indigo-400'
};

// Estilos según el tamaño
const sizeStyles = {
  sm: 'text-xs py-1.5 px-3',
  md: 'text-sm py-2 px-4',
  lg: 'text-base py-2.5 px-5'
};

const baseStyles = 'rounded-lg transition-all duration-200 ease-in-out font-medium flex items-center justify-center gap-2 focus:ring-2 focus:ring-indigo-400/50 focus:outline-none';

const classes = `${baseStyles} ${variantStyles[variant]} ${sizeStyles[size]} ${fullWidth ? 'w-full' : ''} ${customClass}`;

const Element = href ? 'a' : 'button';
---

<Element href={href} class={classes}>
  {icon && (
    <span class="flex items-center justify-center">
      <slot name="icon" />
    </span>
  )}
  <slot />
</Element>
